import React, { useState, useEffect } from "react";
import { CarouselItem, CarouselContent, CarouselPrevious, CarouselNext, Carousel } from "@/components/ui/carousel";
import { Button } from "@/components/ui/button";
import { ChevronLeftIcon, ChevronRightIcon, StarIcon } from "@/components/icons/icons";
import { Footprints, Map } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { AspectRatio } from "@/components/ui/aspect-ratio";
import useGoogleSheetData from "@/components/utility/useGoogleSheet";
import { hotelImages } from "@/data/accommodation";
import { useSiteMetadata } from "@/hooks/use-site-metadata";

export default function Accommodation() {
  const sheetName = 'Accommodation';

  const { data, loading, error } = useGoogleSheetData('1PbEeoFjiIOKic25_Po0Fr6jET2WPvpjmnvyllEn3Kv0', sheetName );
  const accommodationData = Array.isArray(data) ? data.find(sheet => sheet.id === sheetName )?.data : [];

  return (
    <>
    <section>
      <div className="container px-4 md:px-6">
        <div className="grid gap-8 md:gap-12 lg:gap-16">
          <div className="grid gap-6">
            <h2>
              Find Your Perfect Accommodation
            </h2>
            <p className="text-lg text-gray-500">
              Explore our curated selection of top-rated hotels, resorts, and vacation rentals to find your ideal getaway.
            </p>
          </div>

          <div className="grid gap-8 md:grid-cols-2">
            {loading && (
              Array.from({ length: 4 }).map((_, index) => (
                <div key={index} className="group rounded-xl overflow-hidden shadow-lg">
                  <AspectRatio ratio={6 / 4}>
                    <Skeleton className="w-full h-full object-cover"/>
                  </AspectRatio>
                  <div className="p-6 bg-white">
                    <Skeleton className="w-[300px] h-[38px]"/>
                    <Skeleton className="w-[200px] h-[30px] mt-4"/>
                    <Skeleton className="w-[250px] h-[30px] mt-2"/>
                    <Skeleton className="w-[150px] h-[30px] mt-2"/>
                    <div className="flex justify-between items-center mt-6">
                      <Skeleton className="w-[250px] h-[38px]"/>
                      <Skeleton className="w-[150px] h-[38px]" variant="default"/>
                    </div>
                  </div>
                </div>
              ))
            )}
            {error && <div>Error: {error.message}</div>}
            {!loading && !error && accommodationData.map((item, index) => {
              const images = hotelImages[item.hotel] || [{ src: "/images/accommodation/default.jpg", alt: "Default Image" }];
              return (
                <div key={index} className="group rounded-xl overflow-hidden shadow-lg">
                  <Carousel className="w-full">
                    <CarouselContent>
                      {images.map((image, i) => (
                        <CarouselItem key={i}>
                          <img
                            alt={image.alt}
                            className="w-full object-cover"
                            height={600}
                            src={image.src}
                            width={600}
                          />
                        </CarouselItem>
                      ))}
                    </CarouselContent>
                    <CarouselPrevious className="absolute top-1/2 -translate-y-1/2 left-4 z-10 text-gray-900 hover:text-gray-950 transition-colors">
                      <ChevronLeftIcon className="w-6 h-6" />
                    </CarouselPrevious>
                    <CarouselNext className="absolute top-1/2 -translate-y-1/2 right-4 z-10 text-gray-900 hover:text-gray-950 transition-colors">
                      <ChevronRightIcon className="w-6 h-6" />
                    </CarouselNext>
                  </Carousel>
                  <div className="p-6 bg-white flex flex-col justify-between gap-10">
                    <div className="flex flex-col gap-10">
                      <div>
                        <h3 className="text-xl font-semibold mt-0">{item.hotel}</h3>
                        <div className="flex items-center gap-2 mt-2">
                          {[...Array(5)].map((_, i) => (
                            <StarIcon key={i} className={`w-5 h-5 ${i < Math.floor(item.rating) ? 'fill-primary' : 'fill-muted stroke-muted-foreground'}`} />
                          ))}
                          <span className="text-sm text-gray-500">{item.rating}</span>
                        </div>
                        <div className="grid gap-4 mt-4">
                          <div className="flex items-center gap-2">
                            <Map size={20} />
                            <span className="text-sm">{item.address}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <Footprints size={20} />
                            <span className="text-sm">{item.distance}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-sm">{item.desc}</span>
                          </div>
                        </div>
                      </div>
                      <div>
                        <h4 className="mt-0">Price</h4>
                        {item.room1_type &&(
                          <div className="flex flex-col lg:flex-row justify-between gap-3 border-b py-2">
                            <p className="mb-0">{item.room1_type}</p>
                            <p className="flex-none mb-0">{item.room1_price}</p>
                          </div>
                        )}
                        {item.room2_type &&(
                          <div className="flex flex-col lg:flex-row justify-between gap-3 border-b py-2">
                            <p className="mb-0">{item.room2_type}</p>
                            <p className="flex-none mb-0">{item.room2_price}</p>
                          </div>
                        )}
                        {item.room3_type &&(
                          <div className="flex flex-col lg:flex-row justify-between gap-3 border-b py-2">
                            <p className="mb-0">{item.room3_type}</p>
                            <p className="flex-none mb-0">{item.room3_price}</p>
                          </div>
                        )}
                      </div>
                    </div>
                    {item.booking_url && (
                      <div className="flex justify-end mt-auto">
                        <Button className="px-6 py-2" variant="default" asChild>
                          <a href={item.booking_url} target="_blank" rel="noopener noreferrer" className="text-white">Book Now</a>
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>

          <p className="annotation text-center">More to be announced</p>
        </div>
      </div>
    </section>
    </>
  );
}

export function Head() {
  const { title, description, image, siteUrl } = useSiteMetadata();
  const pageTitle = "Accommodation";
  const metaDesc = "Page description for SEO";
  const keywords = "add, your, relevant, keywords";
  const author = "ICMSA";
  const [currentPath, setCurrentPath] = useState('');

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setCurrentPath(window.location.pathname);
    }
  }, []);

  return (
    <>
      <title>{`${pageTitle} - ${description}`}</title>
      <meta name="description" content={metaDesc} />
      <meta name="keywords" content={keywords} />
      <meta name="author" content={author} />
      <meta property="og:title" content={`${title} | ${description}`}  />
      <meta property="og:description" content={metaDesc} />
      <meta property="og:image" content={`${siteUrl}${image}`} />
      <meta property="og:url" content={siteUrl} />
      <meta property="og:type" content="website" />
      <meta property="article:author" content={author} />
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content={title} />
      <meta name="twitter:description" content={metaDesc} />
      <meta name="twitter:image" content={`${siteUrl}${image}`} />
      <link rel="canonical" href={`${siteUrl}${currentPath}`} />
    </>
  );
}
